/* 
Consider the following operation on an arbitrary positive integer:

If n is even  n / 2
If n is odd  n * 3 + 1
Create a function to repeatedly evaluate these operations, until reaching 1. Return the number of steps it took.

See the following example, using 10 as the input, with 6 steps:

10 is even - 10 / 2 = 5
5 is odd - 5 * 3 + 1 = 16
16 is even - 16 / 2 = 8
8 is even - 8 / 2 = 4
4 is even - 4 / 2 = 2
2 is even - 2 / 2 = 1  Reached 1, so return 6
Examples
collatzConjecture(2)  1
collatzConjecture(3)  7
collatzConjecture(10)  6
*/

class HelloWorld {
    public static void main(String[] args) {
        System.out.println(collatzConjecture(2));
        System.out.println(collatzConjecture(3));
        System.out.println(collatzConjecture(10));
    }
    
    
    public static int collatzConjecture(int n) {
        int steps = 0;
        while (n > 1) {
            if (n % 2 ==0) {
                n = n / 2;
                steps++;
            } else {
                n = (n * 3) + 1;
                steps++;
            }
        }
        return steps;    
    }
}


/* Output 
1
7
6

*/
